[
  {
    "objectID": "presentations/Introduction.html#welcome-all",
    "href": "presentations/Introduction.html#welcome-all",
    "title": "Malariasimulation Workshop Introduction",
    "section": "Welcome all!",
    "text": "Welcome all!\nToday‚Äôs aims:\n\nProvide a broad overview of malariasimulation\nLearn how to run the model, view and plot model outputs\nIntroducing interventions\n\nTreatment\nBednets\nOther interventions"
  },
  {
    "objectID": "presentations/Introduction.html#not-todays-aims",
    "href": "presentations/Introduction.html#not-todays-aims",
    "title": "Malariasimulation Workshop Introduction",
    "section": "Not today‚Äôs aims üòÑ",
    "text": "Not today‚Äôs aims üòÑ\n\nAn introduction to the Imperial college malaria model\n\nPlease see key publications\n\nAn introduction to the software package used to create the model\n\nüì¶[individual]\nPlease see websites and supporting documentation for help\n\nContext-specific modelling\n\n\nmalariasimulation, individual, ODE model"
  },
  {
    "objectID": "presentations/Introduction.html#what-is-malariasimulation",
    "href": "presentations/Introduction.html#what-is-malariasimulation",
    "title": "Malariasimulation Workshop Introduction",
    "section": "What is üì¶[malariasimulation]",
    "text": "What is üì¶[malariasimulation]\nMalariasimulation is a individual-based, mechanistic, dynamic malaria transmission model.\nWe model each human as an individual in the modelled population\nWe try to simulate the actual processes and interactions associated with malaria transmission\nMany aspects of the modelled system change over time"
  },
  {
    "objectID": "presentations/Introduction.html#malariasimulation-structure",
    "href": "presentations/Introduction.html#malariasimulation-structure",
    "title": "Malariasimulation Workshop Introduction",
    "section": "Malariasimulation structure",
    "text": "Malariasimulation structure\nMalariasimulation captures the environment, the mosquito population and the human population"
  },
  {
    "objectID": "presentations/Introduction.html#malariasimulation-structure-1",
    "href": "presentations/Introduction.html#malariasimulation-structure-1",
    "title": "Malariasimulation Workshop Introduction",
    "section": "Malariasimulation structure",
    "text": "Malariasimulation structure\nIntervention modules can be include to capture the impact of malaria prevention and control"
  },
  {
    "objectID": "presentations/Introduction.html#malariasimulation-fitting-and-validation",
    "href": "presentations/Introduction.html#malariasimulation-fitting-and-validation",
    "title": "Malariasimulation Workshop Introduction",
    "section": "Malariasimulation fitting and validation",
    "text": "Malariasimulation fitting and validation\nMalariasimulation has been extensively fitted and validated against data to capture observed relationships between key metrics and the impact of interventions.\n\n\nGriffin et al 2010, White et al 2011, Griffin et al 2014, Griffin et al 2015, Griffin et al 2010, Griffin et al 2010"
  },
  {
    "objectID": "presentations/Introduction.html#malariasimulation-and-context-specific-modelling",
    "href": "presentations/Introduction.html#malariasimulation-and-context-specific-modelling",
    "title": "Malariasimulation Workshop Introduction",
    "section": "Malariasimulation and context specific modelling",
    "text": "Malariasimulation and context specific modelling\n\nüì¶[malariasimulation] is a ‚Äúgeneric‚Äù Plasmodium falciparum malaria model\nRunning and exploring model outputs for generic settings is helpful to learn how to run the model, what to expect from the output and how changing parameters influences model results.\nOften, we want to apply the model to a specific setting (e.g.¬†a country, a trial site).\nContext specific runs are more complex and require lots of specific input data. We have software pipelines to support this work (contact Pete Winskill for more information)."
  },
  {
    "objectID": "presentations/Introduction.html#lets-give-it-a-try",
    "href": "presentations/Introduction.html#lets-give-it-a-try",
    "title": "Malariasimulation Workshop Introduction",
    "section": "Let‚Äôs give it a try!",
    "text": "Let‚Äôs give it a try!\n\nüì¶ [malsimtutorial] has interactive tutorials. You can run code within the tutorial window (or in R/Rstudio if desired).\nRun malsimtutorial::run_tutorial(\"Introduction\")"
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "MIT License",
    "section": "",
    "text": "MIT License\nCopyright (c) 2024 malsimtutorial authors\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‚ÄúSoftware‚Äù), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED ‚ÄúAS IS‚Äù, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "inst/tutorials/introduction/introduction.html",
    "href": "inst/tutorials/introduction/introduction.html",
    "title": "malariasimulation: an introductory tutorial",
    "section": "",
    "text": "malariasimulation in an individual based malaria model. This tutorial is an entry-level guide to using the model package in R.\nUse of malariasimulation can be divided into four steps:\n\nWe will look at each of these in turn.\n\n\nThe key function here is get_parameters()\nTry running it to see what it generates.\n\n\nget_parameters()\n\n\n\nYou should see a long list of parameters - it‚Äôs a complicated model!\nTo understand what each parameter does in the model, you can go to the help page (or use ?get_parameters() when you are in R to see the same information).\nPlease don‚Äôt try to understand all of these right now! Instead, use the help page to try answering the questions below for now, and if there are any parameters you‚Äôd like to know more about, feel free to ask a demonstrator.\n\n\nParameters Qs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMost of the parameters have been carefully calibrated so will not need adjusting manually, however, any of these parameters can be adjusted within the get_parameters() function using the overrides argument. For example, one parameter that must be set directly is the human population size (human_population), which can be increased like this:\n\n\nparameters &lt;- get_parameters(overrides = list(human_population = 1000))\nparameters$human_population\n\n\n\nTry changing the population size to 250,000 and check that this has updated in the parameter list.\n\n\n\n\n\nWe generally store a parameter set in an object for future use like so:\n\n\nparameters &lt;- get_parameters()\n\n\n\nBy so doing, we can also adjust individual parameters manually outside of the get_parameters() function.\n\n\nparameters &lt;- get_parameters()\nparameters$human_population &lt;- 1000\nparameters$human_population\n\n\n\nmalariasimulation also contains various helper functions and in-built parameters to help you design your parameter set. We will not cover these in detail here, but they include setting:\n\npopulation demographies set_demography(),\nmosquito species and proportions set_species(), with in-built species specific parameter sets: An. arabiensis arab_params(), An. funestus fun_params(), An. gambiae gamb_params() and An. stephensi steph_params(),\ndrug interventions including MDA and SMC set_drugs(), set_clinical_treatment(), set_mda(), set_smc(),\nbednet and IRS vector control set_bednets(), set_spraying(),\npre-erythrocytic and transmission blocking vaccines set_mass_pev(), set_pev_epi(), set_tbv().\n\nPlease see the package vignettes or the function help pages (e.g., ?set_demography()) for more details on how to use these, or ask a demonstrator!\n\n\n\nThe default parameters for the initial human disease state proportions and human immunity levels may not suit the scenario you are simulating. For instance, if you are starting a simulation with no immunity to malaria in a high-transmission area, the default settings won‚Äôt be appropriate.\nWe can use the set_equilibrium() function to set the initial transmission level and calculate an equilibrium based on that transmissibility level and your chosen model parameters.\nIn set_equilibrium(), you will define the initial EIR (entomological inoculation rate). The Entomological Inoculation Rate (EIR) is a key metric used in malaria epidemiology. It is defined as the number of infectious bites received by a person per unit of time (our model uses per year for inputs). Adjusting the initial EIR allows you to reflect the disease prevalence in the region you are studying.\n\n\n# Generate parameters\nparameters &lt;- get_parameters()\n\n# Set equilibrium\nparameters_eq &lt;- set_equilibrium(parameters = parameters, init_EIR = 5)\n\n\n\nNote that the parameters list now contains a new element called init_EIR:\n\n\nparameters &lt;- get_parameters()\nparameters_eq &lt;- set_equilibrium(parameters = parameters, init_EIR = 5)\nparameters_eq$init_EIR\n\n\n\nTry setting the initial EIR to 10.\n\n\n\n\n\n\n\n\nOnce the parameters have been set, we can run a simulation.\nThe main simulation function is run_simulation(), which requires the parameter set and the number of timesteps in days you would like to run the simulation for. It can be helpful to define what a year is!\n\n\n# Generate parameters\nparameters &lt;- get_parameters()\n\n# Set equilibrium\nparameters_eq &lt;- set_equilibrium(parameters = parameters, init_EIR = 5)\n\n# Run simulation\nyear &lt;- 365\nsimulation_output &lt;- run_simulation(timesteps = 10 * year, parameters = parameters_eq)\n\n# Have a look at the raw model output - we'll explore these in the next page!\nhead(simulation_output)\n\n\n\n\n\n\nNow, let‚Äôs print the output to the screen to take a look:\n\n\n# Generate parameters\nparameters &lt;- get_parameters()\n\n# Set equilibrium\nparameters_eq &lt;- set_equilibrium(parameters = parameters, init_EIR = 5)\n\n# Run simulation\nyear &lt;- 365\nsimulation_output &lt;- run_simulation(timesteps = 10 * year, parameters = parameters_eq)\n\n# Look at simulation outputs\nhead(simulation_output)\n\n\n\nAgain, there‚Äôs a lot of information that‚Äôs being outputted! To understand these outputs, we can view the help page (or use ?run_simulation() when you are in R to see the same information).\nLet‚Äôs do another quick quiz about these outputs!\n\n\nOutputs Qs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet‚Äôs now create a simple plot to visualise the human states. The human states should be maintained approximately at their equilibrium (remember, the model is stochastic, so there will be some ‚Äúrandom‚Äù variation through time).\n\n\nparameters &lt;- get_parameters()\nparameters_eq &lt;- set_equilibrium(parameters = parameters, init_EIR = 5)\nyear &lt;- 365\nsimulation_output &lt;- run_simulation(timesteps = 10 * year, parameters = parameters_eq)\n\nsimulation_output |&gt; \n  select(timestep, paste0(c(\"S\",\"A\",\"D\",\"U\",\"Tr\"), \"_count\")) |&gt; \n  pivot_longer(cols = ends_with(\"count\"), names_to = \"human_state\", values_to = \"count\") |&gt; \n  ggplot() +\n  geom_line(aes(x = timestep, y = count, color = human_state))\n\n\n\nOne of our key outputs is the prevalence of light-microscopy detectable infections. This is not directly output by the model, so we must calculate it! Luckily, the model outputs the number of detectable infections and the total number within the defined age group, so it‚Äôs not too difficult.\n\n\nparameters &lt;- get_parameters()\nparameters_eq &lt;- set_equilibrium(parameters = parameters, init_EIR = 5)\nyear &lt;- 365\nsimulation_output &lt;- run_simulation(timesteps = 10 * year, parameters = parameters_eq)\n\nsimulation_output$lm_prevalence_730_3650 &lt;- simulation_output$n_detect_730_3650 / simulation_output$n_730_3650\n\nggplot(data = simulation_output) +\n  geom_line(aes(x = timestep, y = lm_prevalence_730_3650))\n\n\n\nBONUS TASK: run a simulation using the default parameter set (before equilibrium) and plot the human states. Can you see how the human states drift? What do you think are the mechanistic causes of these patterns in the model?\n\n\n\n\n\n\n\n\nWell done! We‚Äôve covered all the content in the basic tutorial. Before we move on, let‚Äôs try to put everything we‚Äôve learned together!\n\nGenerate two different parameter sets with population sizes of 50 and 500.\nRun simulations of 1000 timesteps for each parameter set.\nPlot the light-microscopy detectable prevalence of 2-10 year olds through time.\nWhat differences do you see in prevalence between the two simulations?\nHow can we explain these differences?"
  },
  {
    "objectID": "inst/tutorials/introduction/introduction.html#generate-parameters",
    "href": "inst/tutorials/introduction/introduction.html#generate-parameters",
    "title": "malariasimulation: an introductory tutorial",
    "section": "",
    "text": "The key function here is get_parameters()\nTry running it to see what it generates.\n\n\nget_parameters()\n\n\n\nYou should see a long list of parameters - it‚Äôs a complicated model!\nTo understand what each parameter does in the model, you can go to the help page (or use ?get_parameters() when you are in R to see the same information).\nPlease don‚Äôt try to understand all of these right now! Instead, use the help page to try answering the questions below for now, and if there are any parameters you‚Äôd like to know more about, feel free to ask a demonstrator.\n\n\nParameters Qs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMost of the parameters have been carefully calibrated so will not need adjusting manually, however, any of these parameters can be adjusted within the get_parameters() function using the overrides argument. For example, one parameter that must be set directly is the human population size (human_population), which can be increased like this:\n\n\nparameters &lt;- get_parameters(overrides = list(human_population = 1000))\nparameters$human_population\n\n\n\nTry changing the population size to 250,000 and check that this has updated in the parameter list.\n\n\n\n\n\nWe generally store a parameter set in an object for future use like so:\n\n\nparameters &lt;- get_parameters()\n\n\n\nBy so doing, we can also adjust individual parameters manually outside of the get_parameters() function.\n\n\nparameters &lt;- get_parameters()\nparameters$human_population &lt;- 1000\nparameters$human_population\n\n\n\nmalariasimulation also contains various helper functions and in-built parameters to help you design your parameter set. We will not cover these in detail here, but they include setting:\n\npopulation demographies set_demography(),\nmosquito species and proportions set_species(), with in-built species specific parameter sets: An. arabiensis arab_params(), An. funestus fun_params(), An. gambiae gamb_params() and An. stephensi steph_params(),\ndrug interventions including MDA and SMC set_drugs(), set_clinical_treatment(), set_mda(), set_smc(),\nbednet and IRS vector control set_bednets(), set_spraying(),\npre-erythrocytic and transmission blocking vaccines set_mass_pev(), set_pev_epi(), set_tbv().\n\nPlease see the package vignettes or the function help pages (e.g., ?set_demography()) for more details on how to use these, or ask a demonstrator!"
  },
  {
    "objectID": "inst/tutorials/introduction/introduction.html#set-equilibrium",
    "href": "inst/tutorials/introduction/introduction.html#set-equilibrium",
    "title": "malariasimulation: an introductory tutorial",
    "section": "",
    "text": "The default parameters for the initial human disease state proportions and human immunity levels may not suit the scenario you are simulating. For instance, if you are starting a simulation with no immunity to malaria in a high-transmission area, the default settings won‚Äôt be appropriate.\nWe can use the set_equilibrium() function to set the initial transmission level and calculate an equilibrium based on that transmissibility level and your chosen model parameters.\nIn set_equilibrium(), you will define the initial EIR (entomological inoculation rate). The Entomological Inoculation Rate (EIR) is a key metric used in malaria epidemiology. It is defined as the number of infectious bites received by a person per unit of time (our model uses per year for inputs). Adjusting the initial EIR allows you to reflect the disease prevalence in the region you are studying.\n\n\n# Generate parameters\nparameters &lt;- get_parameters()\n\n# Set equilibrium\nparameters_eq &lt;- set_equilibrium(parameters = parameters, init_EIR = 5)\n\n\n\nNote that the parameters list now contains a new element called init_EIR:\n\n\nparameters &lt;- get_parameters()\nparameters_eq &lt;- set_equilibrium(parameters = parameters, init_EIR = 5)\nparameters_eq$init_EIR\n\n\n\nTry setting the initial EIR to 10."
  },
  {
    "objectID": "inst/tutorials/introduction/introduction.html#run-simulation",
    "href": "inst/tutorials/introduction/introduction.html#run-simulation",
    "title": "malariasimulation: an introductory tutorial",
    "section": "",
    "text": "Once the parameters have been set, we can run a simulation.\nThe main simulation function is run_simulation(), which requires the parameter set and the number of timesteps in days you would like to run the simulation for. It can be helpful to define what a year is!\n\n\n# Generate parameters\nparameters &lt;- get_parameters()\n\n# Set equilibrium\nparameters_eq &lt;- set_equilibrium(parameters = parameters, init_EIR = 5)\n\n# Run simulation\nyear &lt;- 365\nsimulation_output &lt;- run_simulation(timesteps = 10 * year, parameters = parameters_eq)\n\n# Have a look at the raw model output - we'll explore these in the next page!\nhead(simulation_output)"
  },
  {
    "objectID": "inst/tutorials/introduction/introduction.html#process-outputs",
    "href": "inst/tutorials/introduction/introduction.html#process-outputs",
    "title": "malariasimulation: an introductory tutorial",
    "section": "",
    "text": "Now, let‚Äôs print the output to the screen to take a look:\n\n\n# Generate parameters\nparameters &lt;- get_parameters()\n\n# Set equilibrium\nparameters_eq &lt;- set_equilibrium(parameters = parameters, init_EIR = 5)\n\n# Run simulation\nyear &lt;- 365\nsimulation_output &lt;- run_simulation(timesteps = 10 * year, parameters = parameters_eq)\n\n# Look at simulation outputs\nhead(simulation_output)\n\n\n\nAgain, there‚Äôs a lot of information that‚Äôs being outputted! To understand these outputs, we can view the help page (or use ?run_simulation() when you are in R to see the same information).\nLet‚Äôs do another quick quiz about these outputs!\n\n\nOutputs Qs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet‚Äôs now create a simple plot to visualise the human states. The human states should be maintained approximately at their equilibrium (remember, the model is stochastic, so there will be some ‚Äúrandom‚Äù variation through time).\n\n\nparameters &lt;- get_parameters()\nparameters_eq &lt;- set_equilibrium(parameters = parameters, init_EIR = 5)\nyear &lt;- 365\nsimulation_output &lt;- run_simulation(timesteps = 10 * year, parameters = parameters_eq)\n\nsimulation_output |&gt; \n  select(timestep, paste0(c(\"S\",\"A\",\"D\",\"U\",\"Tr\"), \"_count\")) |&gt; \n  pivot_longer(cols = ends_with(\"count\"), names_to = \"human_state\", values_to = \"count\") |&gt; \n  ggplot() +\n  geom_line(aes(x = timestep, y = count, color = human_state))\n\n\n\nOne of our key outputs is the prevalence of light-microscopy detectable infections. This is not directly output by the model, so we must calculate it! Luckily, the model outputs the number of detectable infections and the total number within the defined age group, so it‚Äôs not too difficult.\n\n\nparameters &lt;- get_parameters()\nparameters_eq &lt;- set_equilibrium(parameters = parameters, init_EIR = 5)\nyear &lt;- 365\nsimulation_output &lt;- run_simulation(timesteps = 10 * year, parameters = parameters_eq)\n\nsimulation_output$lm_prevalence_730_3650 &lt;- simulation_output$n_detect_730_3650 / simulation_output$n_730_3650\n\nggplot(data = simulation_output) +\n  geom_line(aes(x = timestep, y = lm_prevalence_730_3650))\n\n\n\nBONUS TASK: run a simulation using the default parameter set (before equilibrium) and plot the human states. Can you see how the human states drift? What do you think are the mechanistic causes of these patterns in the model?"
  },
  {
    "objectID": "inst/tutorials/introduction/introduction.html#putting-it-all-together",
    "href": "inst/tutorials/introduction/introduction.html#putting-it-all-together",
    "title": "malariasimulation: an introductory tutorial",
    "section": "",
    "text": "Well done! We‚Äôve covered all the content in the basic tutorial. Before we move on, let‚Äôs try to put everything we‚Äôve learned together!\n\nGenerate two different parameter sets with population sizes of 50 and 500.\nRun simulations of 1000 timesteps for each parameter set.\nPlot the light-microscopy detectable prevalence of 2-10 year olds through time.\nWhat differences do you see in prevalence between the two simulations?\nHow can we explain these differences?"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Malariasimulation Workshop",
    "section": "",
    "text": "An interactive workshop to provide an overview of how to use üì¶ [malariasimulation] for malaria modelling!"
  },
  {
    "objectID": "index.html#workshop-details",
    "href": "index.html#workshop-details",
    "title": "Malariasimulation Workshop",
    "section": "Workshop details",
    "text": "Workshop details\nüóìÔ∏è Tuesday 11th June 2024\n‚è∞ 0900-1200\nüè® Room 310, SPH White City\nüíª Please bring your laptop!"
  },
  {
    "objectID": "index.html#before-the-workshop",
    "href": "index.html#before-the-workshop",
    "title": "Malariasimulation Workshop",
    "section": "Before the workshop",
    "text": "Before the workshop\nPlease make sure you have the following installed:\n\nAn up-to-date (Version &gt;=4.3.0) installation of R. Please note, for those updating to R version 4.3 and above who have not updated recently you may also require an updated version of Rtools.\nAn up-to-date (Version &gt;= 2022.12.0) installation of RStudio. See help-&gt;check for updates.\nüì¶ [malariasimulation]\nThe workshop üì¶ [malsimtutorial]\n\nWhen installing packages please say ‚Äúyes‚Äù to any prompts asking you to update or install dependencies.\n\noptions(\n  repos = c(\n    mrcide = 'https://mrc-ide.r-universe.dev',\n    CRAN = 'https://cloud.r-project.org')\n)\ninstall.packages('malariasimulation')\n\n# The workshop package can be installed directly from github:\nremotes::install_github(\"mrc-ide/malsimtutorial\")\n\nFollowing installation you should be able to successfully run:\n\noutput &lt;- malariasimulation::run_simulation(100)\noutput\n\nand\n\nmalsimtutorial::run_tutorial(\"Test\")\n\nIf you can‚Äôt, please contact the organisers before the workshop."
  },
  {
    "objectID": "inst/tutorials/bednets/bednets.html",
    "href": "inst/tutorials/bednets/bednets.html",
    "title": "Bednets",
    "section": "",
    "text": "Another widely used intervention that can be simulated using malariasimulation is the distribution of insecticide treated bed nets (ITNs/LLINs). malariasimulation allows the users to tune a number of important components of both the bed nets to be distributed (e.g.¬†efficacy, longevity) and the way in which they are distributed (e.g.¬†timing, coverage, and target population). In this tutorial, we will build on what we have learnt so far to learn how to simulate bed net distribution campaigns.\n\nTo simulate the distribution of bed nets, there are six steps:\n\nLoad the base set of malariasimulation parameters (get_parameters())\nSet the vector community (set_species())\nSpecify the bed net parameters (set_bednets())\nEquilibrate the parameter set to an initial EIR (set_equilibrium())\nRun the simulation (run_simulation())\nProcess the simulation outputs\n\n\n\nThe use of bed nets as an intervention in malariasimulation is specified using the set_bednets() helper function (see ?set_bednets() for the helper file).\nThe set_bednets() function requires the user to supply 8 arguments:\n\nparameters: A list of malariasimulation parameters (as generated using get_parameter).\ntimesteps: A vector of timesteps on which the user wants to update bed net parameters.\ncoverages: A vector of coverages, as a proportion of people to receive a bed net, for each timestep .\nretention: The average number of days an individual keeps a given net.\ndn0: A matrix, where each row is for a mosquito species and each column a timestep, of the average probability a mosquito is killed upon coming in to contact with a net.\nrn: A matrix, where each row is for a mosquito species and each column a timestep, of the average probability a mosquito is repelled from feeding by a net.\nrnm: A matrix, where each row is for a mosquito species and each column a timestep, of the minimum probability a mosquito is repelled by a net.\ngamman: A vector containing the half-life of the insecticidal component of a bed net for each time step.\n\nNote that the dn0, rn, and rnm arguments require matrices with a column for each timestep a bed net parameter update is scheduled, and a row for each species being simulated. By default, malariasimulation simulates a mosquito population with a single species, An. gambiae, but additional species can be added using set_species() (see Mosquito Species vignette for a tutorial). Similarly, the vector of coverages must have a value for each timestep bed net events are scheduled for (i.e.¬†length(timesteps) == length(coverages)).\nLet‚Äôs take a look at a simple example of how to use set_bednets() to simulate bed net distributions when a single species of mosquito is simulated. As the default behaviour for malariasimulation is to simulate a mosquito population composed of only An. gambiae, we do not need to call set_species() in this instance.\n\n\n# Load the base parameter set:\nparameters &lt;- get_parameters(overrides = list(human_population = 1000))\n\n# Load the bed net parameters into the parameter list using set_bednets()\nparameters &lt;- set_bednets(parameters = parameters,\n                          timesteps = c(1, 4) * 365,\n                          coverages = c(0.5, 0.5),\n                          retention = 5 * 365,\n                          dn0 = matrix(c(0.533, 0.533), nrow = 2, ncol = 1),\n                          rn =  matrix(c(0.56, 0.56), nrow = 2, ncol = 1),\n                          rnm =  matrix(c(0.24, 0.24), nrow = 2, ncol = 1), \n                          gamman =  rep(2.64 * 365, 2))\n\n\n\nHere, we have specified a bed net campaign involving two distribution events, one to occur after 1 year and another after 4 years, which will achieve a coverage of 50%. We are assuming that individuals will, on average, retain a bed net for 5 years (retention), and that each bed net has a half life (gamman) of ~960 days.\n\n\nParameters Qs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow that we‚Äôve parameterised a bed net campaign, let‚Äôs run the simulation! Note that we still include the step to equilibrate the parameters to a given level of transmission (initial_EIR).\n\n\n# Load the base parameter set:\nparameters &lt;- get_parameters(overrides = list(human_population = 1000))\n\n# Load the bed net parameters into the parameter list using set_bednets()\nparameters &lt;- set_bednets(parameters = parameters,\n                          timesteps = c(1, 4) * 365,\n                          coverages = c(0.5, 0.5),\n                          retention = 5 * 365,\n                          dn0 = matrix(c(0.533, 0.533), nrow = 2, ncol = 1),\n                          rn =  matrix(c(0.56, 0.56), nrow = 2, ncol = 1),\n                          rnm =  matrix(c(0.24, 0.24), nrow = 2, ncol = 1), \n                          gamman =  rep(2.64 * 365, 2))\n\n# Equilibrate the model parameters to an initial EIR:\nparameters &lt;- set_equilibrium(parameters = parameters, \n                              init_EIR = 8)\n\n# Run the simulation\nsimulation_output &lt;- run_simulation(timesteps = 7 * 365, \n                                    parameters = parameters)\n\n# Plot the mosquito population through time:\nsimulation_output |&gt;\n  mutate(total_mosquito_population = Sm_gamb_count + Im_gamb_count + Pm_gamb_count) |&gt;\n  ggplot(aes(x = timestep, y = total_mosquito_population)) +\n  geom_line(linewidth = 1.2, colour = \"deepskyblue2\") +\n  theme_bw() +\n  labs(x = \"Time (days)\", y = \"Adult Female Mosquito Population Size\") +\n  scale_y_continuous(limits = c(0, 7500)) +\n  geom_vline(xintercept = c(365, 1460), linetype = \"dashed\")\n\n# Plot the mosquito population through time:\nsimulation_output |&gt;\n  mutate(pfpr210 = n_detect_730_3650 / n_730_3650) |&gt;\n  ggplot(aes(x = timestep, y = pfpr210)) +\n  geom_line(linewidth = 1.2, colour = \"brown2\") +\n  theme_bw() +\n  labs(x = \"Time (days)\", y = \"Prevalence (2-10)\") +\n  scale_y_continuous(limits = c(0, 1), expand = c(0, 0)) +\n  scale_x_continuous(expand = c(0, 0))\n\n\n\nLooking at the plots, we can see that the net distribution events (black dashed lines) cause a rapid decline in the adult female mosquito population size which results in a decline in prevalence. We can also see that the prevalence begins to rebound between the distribution events. Think about why this is occurring. What parameter(s) might affect the rate of this recovery? Using the code chunk above, try re-running the simulation with a different net retention time and see how it affects what we see.\n\n\n\nAs mentioned, the default behaviour is for malariasimulation to simulate a single mosquito species, Anopheles gambiae. However, malariasimulationsupports the simulation of settings with multiple mosquito species, and has in-built parameter sets for *An. funestus* (fun_params), *An. arabiensis* (arab_params), and *An. stephensi* (steph_params`). In this section, we‚Äôll see how to set up the same bed net campaign we‚Äôve just used, but with two vector species.\nWe won‚Äôt focus on the parameters in these sets today (although feel free to ask later), but we can view the parameter sets:\n\n\n# View the parameter set for An. funestus:\nfun_params\n\n# ... and view the associated helper files:\n?fun_params\n\n\n\nThe set_species() function is used to load the mosquito species parameters of interest into our list of malariasimulation parameters. The set_species() function has three arguments:\n\nparameters: A list of malariasimulation parameters (as established using get_parameters())\nspecies: A list containing the mosquito species parameters\nproportions: The proportion of the total mosquito species represented by each species in species (must therefore sum to 1)\n\nBelow is an example of how to use set_species() to specify a simulation with two species, An. gambiae and An. stephensi. Note that, as with set_drugs(), the mosquito species must be passed to the function as a list:\n\n\n# Load the base parameter set:\nparameters &lt;- get_parameters(overrides = list(human_population = 1000))\n\n# Load the parameters for the mosquito species\nparameters &lt;- set_species(parameters = parameters,\n                          species = list(gamb_params, steph_params),\n                          proportions = c(0.7,0.3))\n\n\n\nNow that we‚Äôve seen how to parameterise the model for multiple vector species, let‚Äôs add a bed net campaign and run the simulation. Remember, as we‚Äôre simulating multiple vector species, the matrix inputs for the dn0, rn, and rnm parameters will need rows for each species!\n\n\n# Load the base parameter set:\nparameters &lt;- get_parameters(overrides = list(human_population = 1000))\n\n# Load the parameters for the mosquito species\nparameters &lt;- set_species(parameters = parameters,\n                          species = list(gamb_params, steph_params),\n                          proportions = c(0.7,0.3))\n\n# Specify a bed net campaign\nparameters &lt;- set_bednets(parameters = parameters,\n                          timesteps = c(1, 4) * 365,\n                          coverages = c(0.5, 0.5),\n                          retention = 5 * 365,\n                          dn0 = matrix(c(0.533, 0.533, 0.533, 0.533), nrow = 2, ncol = 2),\n                          rn =  matrix(c(0.56, 0.56, 0.56, 0.56), nrow = 2, ncol = 2),\n                          rnm =  matrix(c(0.24, 0.24, 0.24, 0.24), nrow = 2, ncol = 2), \n                          gamman =  rep(2.64 * 365, 2))\n\n# Equilibrate the model parameters:\nparameters &lt;- set_equilibrium(parameters = parameters, init_EIR = 8)\n\n# Run the simulation:\nsimulation_output &lt;- run_simulation(timesteps = 7 * 365, \n                                    parameters = parameters)\n\n# Plot the mosquito population through time:\nsimulation_output |&gt;\n  mutate(gamb_total = Sm_gamb_count + Im_gamb_count + Pm_gamb_count,\n         steph_total = Sm_steph_count + Im_steph_count + Pm_steph_count) |&gt;\n  select(timestep, gamb_total, steph_total) |&gt;\n  pivot_longer(cols = c(gamb_total, steph_total), names_to = \"Species\", values_to = \"Count\") |&gt;\n  ggplot(aes(x = timestep, y = Count, colour = Species)) +\n  geom_line(linewidth = 1.2) +\n  theme_bw() +\n  labs(x = \"Time (days)\", y = \"Number of Adult Female Mosquitoes\") +\n  scale_y_continuous(limits = c(0, 7500)) +\n  geom_vline(xintercept = c(365, 1460), linetype = \"dashed\")\n\n\n\nWe have plotted the number of adult mosquitoes of each species through time. What do you notice about the effect of the bed net distributions on the An. gambiae and An. stephensi? Does the information in ?gamb_params and/or ?steph_params provide any clues?"
  },
  {
    "objectID": "inst/tutorials/bednets/bednets.html#specifying-a-simple-bed-net-campaign",
    "href": "inst/tutorials/bednets/bednets.html#specifying-a-simple-bed-net-campaign",
    "title": "Bednets",
    "section": "",
    "text": "The use of bed nets as an intervention in malariasimulation is specified using the set_bednets() helper function (see ?set_bednets() for the helper file).\nThe set_bednets() function requires the user to supply 8 arguments:\n\nparameters: A list of malariasimulation parameters (as generated using get_parameter).\ntimesteps: A vector of timesteps on which the user wants to update bed net parameters.\ncoverages: A vector of coverages, as a proportion of people to receive a bed net, for each timestep .\nretention: The average number of days an individual keeps a given net.\ndn0: A matrix, where each row is for a mosquito species and each column a timestep, of the average probability a mosquito is killed upon coming in to contact with a net.\nrn: A matrix, where each row is for a mosquito species and each column a timestep, of the average probability a mosquito is repelled from feeding by a net.\nrnm: A matrix, where each row is for a mosquito species and each column a timestep, of the minimum probability a mosquito is repelled by a net.\ngamman: A vector containing the half-life of the insecticidal component of a bed net for each time step.\n\nNote that the dn0, rn, and rnm arguments require matrices with a column for each timestep a bed net parameter update is scheduled, and a row for each species being simulated. By default, malariasimulation simulates a mosquito population with a single species, An. gambiae, but additional species can be added using set_species() (see Mosquito Species vignette for a tutorial). Similarly, the vector of coverages must have a value for each timestep bed net events are scheduled for (i.e.¬†length(timesteps) == length(coverages)).\nLet‚Äôs take a look at a simple example of how to use set_bednets() to simulate bed net distributions when a single species of mosquito is simulated. As the default behaviour for malariasimulation is to simulate a mosquito population composed of only An. gambiae, we do not need to call set_species() in this instance.\n\n\n# Load the base parameter set:\nparameters &lt;- get_parameters(overrides = list(human_population = 1000))\n\n# Load the bed net parameters into the parameter list using set_bednets()\nparameters &lt;- set_bednets(parameters = parameters,\n                          timesteps = c(1, 4) * 365,\n                          coverages = c(0.5, 0.5),\n                          retention = 5 * 365,\n                          dn0 = matrix(c(0.533, 0.533), nrow = 2, ncol = 1),\n                          rn =  matrix(c(0.56, 0.56), nrow = 2, ncol = 1),\n                          rnm =  matrix(c(0.24, 0.24), nrow = 2, ncol = 1), \n                          gamman =  rep(2.64 * 365, 2))\n\n\n\nHere, we have specified a bed net campaign involving two distribution events, one to occur after 1 year and another after 4 years, which will achieve a coverage of 50%. We are assuming that individuals will, on average, retain a bed net for 5 years (retention), and that each bed net has a half life (gamman) of ~960 days.\n\n\nParameters Qs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow that we‚Äôve parameterised a bed net campaign, let‚Äôs run the simulation! Note that we still include the step to equilibrate the parameters to a given level of transmission (initial_EIR).\n\n\n# Load the base parameter set:\nparameters &lt;- get_parameters(overrides = list(human_population = 1000))\n\n# Load the bed net parameters into the parameter list using set_bednets()\nparameters &lt;- set_bednets(parameters = parameters,\n                          timesteps = c(1, 4) * 365,\n                          coverages = c(0.5, 0.5),\n                          retention = 5 * 365,\n                          dn0 = matrix(c(0.533, 0.533), nrow = 2, ncol = 1),\n                          rn =  matrix(c(0.56, 0.56), nrow = 2, ncol = 1),\n                          rnm =  matrix(c(0.24, 0.24), nrow = 2, ncol = 1), \n                          gamman =  rep(2.64 * 365, 2))\n\n# Equilibrate the model parameters to an initial EIR:\nparameters &lt;- set_equilibrium(parameters = parameters, \n                              init_EIR = 8)\n\n# Run the simulation\nsimulation_output &lt;- run_simulation(timesteps = 7 * 365, \n                                    parameters = parameters)\n\n# Plot the mosquito population through time:\nsimulation_output |&gt;\n  mutate(total_mosquito_population = Sm_gamb_count + Im_gamb_count + Pm_gamb_count) |&gt;\n  ggplot(aes(x = timestep, y = total_mosquito_population)) +\n  geom_line(linewidth = 1.2, colour = \"deepskyblue2\") +\n  theme_bw() +\n  labs(x = \"Time (days)\", y = \"Adult Female Mosquito Population Size\") +\n  scale_y_continuous(limits = c(0, 7500)) +\n  geom_vline(xintercept = c(365, 1460), linetype = \"dashed\")\n\n# Plot the mosquito population through time:\nsimulation_output |&gt;\n  mutate(pfpr210 = n_detect_730_3650 / n_730_3650) |&gt;\n  ggplot(aes(x = timestep, y = pfpr210)) +\n  geom_line(linewidth = 1.2, colour = \"brown2\") +\n  theme_bw() +\n  labs(x = \"Time (days)\", y = \"Prevalence (2-10)\") +\n  scale_y_continuous(limits = c(0, 1), expand = c(0, 0)) +\n  scale_x_continuous(expand = c(0, 0))\n\n\n\nLooking at the plots, we can see that the net distribution events (black dashed lines) cause a rapid decline in the adult female mosquito population size which results in a decline in prevalence. We can also see that the prevalence begins to rebound between the distribution events. Think about why this is occurring. What parameter(s) might affect the rate of this recovery? Using the code chunk above, try re-running the simulation with a different net retention time and see how it affects what we see."
  },
  {
    "objectID": "inst/tutorials/bednets/bednets.html#specifying-a-campaign-when-simulating-multiple-mosquito-species",
    "href": "inst/tutorials/bednets/bednets.html#specifying-a-campaign-when-simulating-multiple-mosquito-species",
    "title": "Bednets",
    "section": "",
    "text": "As mentioned, the default behaviour is for malariasimulation to simulate a single mosquito species, Anopheles gambiae. However, malariasimulationsupports the simulation of settings with multiple mosquito species, and has in-built parameter sets for *An. funestus* (fun_params), *An. arabiensis* (arab_params), and *An. stephensi* (steph_params`). In this section, we‚Äôll see how to set up the same bed net campaign we‚Äôve just used, but with two vector species.\nWe won‚Äôt focus on the parameters in these sets today (although feel free to ask later), but we can view the parameter sets:\n\n\n# View the parameter set for An. funestus:\nfun_params\n\n# ... and view the associated helper files:\n?fun_params\n\n\n\nThe set_species() function is used to load the mosquito species parameters of interest into our list of malariasimulation parameters. The set_species() function has three arguments:\n\nparameters: A list of malariasimulation parameters (as established using get_parameters())\nspecies: A list containing the mosquito species parameters\nproportions: The proportion of the total mosquito species represented by each species in species (must therefore sum to 1)\n\nBelow is an example of how to use set_species() to specify a simulation with two species, An. gambiae and An. stephensi. Note that, as with set_drugs(), the mosquito species must be passed to the function as a list:\n\n\n# Load the base parameter set:\nparameters &lt;- get_parameters(overrides = list(human_population = 1000))\n\n# Load the parameters for the mosquito species\nparameters &lt;- set_species(parameters = parameters,\n                          species = list(gamb_params, steph_params),\n                          proportions = c(0.7,0.3))\n\n\n\nNow that we‚Äôve seen how to parameterise the model for multiple vector species, let‚Äôs add a bed net campaign and run the simulation. Remember, as we‚Äôre simulating multiple vector species, the matrix inputs for the dn0, rn, and rnm parameters will need rows for each species!\n\n\n# Load the base parameter set:\nparameters &lt;- get_parameters(overrides = list(human_population = 1000))\n\n# Load the parameters for the mosquito species\nparameters &lt;- set_species(parameters = parameters,\n                          species = list(gamb_params, steph_params),\n                          proportions = c(0.7,0.3))\n\n# Specify a bed net campaign\nparameters &lt;- set_bednets(parameters = parameters,\n                          timesteps = c(1, 4) * 365,\n                          coverages = c(0.5, 0.5),\n                          retention = 5 * 365,\n                          dn0 = matrix(c(0.533, 0.533, 0.533, 0.533), nrow = 2, ncol = 2),\n                          rn =  matrix(c(0.56, 0.56, 0.56, 0.56), nrow = 2, ncol = 2),\n                          rnm =  matrix(c(0.24, 0.24, 0.24, 0.24), nrow = 2, ncol = 2), \n                          gamman =  rep(2.64 * 365, 2))\n\n# Equilibrate the model parameters:\nparameters &lt;- set_equilibrium(parameters = parameters, init_EIR = 8)\n\n# Run the simulation:\nsimulation_output &lt;- run_simulation(timesteps = 7 * 365, \n                                    parameters = parameters)\n\n# Plot the mosquito population through time:\nsimulation_output |&gt;\n  mutate(gamb_total = Sm_gamb_count + Im_gamb_count + Pm_gamb_count,\n         steph_total = Sm_steph_count + Im_steph_count + Pm_steph_count) |&gt;\n  select(timestep, gamb_total, steph_total) |&gt;\n  pivot_longer(cols = c(gamb_total, steph_total), names_to = \"Species\", values_to = \"Count\") |&gt;\n  ggplot(aes(x = timestep, y = Count, colour = Species)) +\n  geom_line(linewidth = 1.2) +\n  theme_bw() +\n  labs(x = \"Time (days)\", y = \"Number of Adult Female Mosquitoes\") +\n  scale_y_continuous(limits = c(0, 7500)) +\n  geom_vline(xintercept = c(365, 1460), linetype = \"dashed\")\n\n\n\nWe have plotted the number of adult mosquitoes of each species through time. What do you notice about the effect of the bed net distributions on the An. gambiae and An. stephensi? Does the information in ?gamb_params and/or ?steph_params provide any clues?"
  },
  {
    "objectID": "inst/tutorials/site_files/site_files.html",
    "href": "inst/tutorials/site_files/site_files.html",
    "title": "Site File",
    "section": "",
    "text": "malariasimulation can be used to model specific contexts (IE, a specific admin-1 unit or country). This is facilitated by a site file, which is a file that characterizes different admin units an a malaria-endemic country.\n\n\nmessage('this is a message')"
  },
  {
    "objectID": "inst/tutorials/treatment/treatment.html",
    "href": "inst/tutorials/treatment/treatment.html",
    "title": "Treatment",
    "section": "",
    "text": "Now that we know how to set up and run basic simulations using malariasimulation, we can start to think about how we build interventions into our simulations and visualise how they affect malaria transmission dynamics. One such intervention is clinical treatment, or case management, in which individuals that get a clinical case of malaria are treated with an antimalarial drug.\nTo simulate clinical treatment in malariasimulation, there are six steps:\n\n\nLoad the base set of malariasimulation parameters (get_parameters())\nLoad parameters for the drug(s) of choice into our list of model parameters (set_drugs())\nSpecify the clinical treatment coverage for each drug through time (set_clinical_treatment())\nTune the parameters to the equilibrial state (set_equilibrium())\nRun the simulation (run_simulation())\nProcess the simulation outputs\n\nUsing these six steps, we can simulate clinical treatment regimes that span from the very simple (single drug at a single coverage level through time) to the quite complex (multiple drugs with time-varying coverages).\n\n\nAs we saw earlier, the first step when using malariasimulation is to load a set of parameters using get_parameters():\n\n\n# Establish a list of malariasimulation parameters:\nparameters &lt;- get_parameters(overrides = list(human_population = 1000))\n\n\n\nThe second step is to load the parameters for the drug(s) we want to simulate into our list of parameters. The malariasimulation package has in-built parameter sets for 3 drugs:\n\nArtemether lumefantrine (AL_params)\nDihydroartemisinin piperaquine (DHA_PQP_params)\nSulfadoxine pyrimethamine (SP_AQ_params)\n\nWe can view these parameter sets by simply calling them. Here are the parameters for artemether lumefantrine:\n\n\n# View the artemether lumefantrine (AL) parameter set:\nAL_params\n\n\n\nThe parameters in these sets are:\n\ndrug_efficacy: probability that treatment with the drug successfully clears the infection\ndrug_rel_c: The onward infectiousness of a treated individual to a mosquito relative to an untreated individual\ndrug_prophylaxis_shape: Shape parameter for a Weibull distribution describing an individuals prophylactic protection over time following treatment\ndrug_prophylaxis_scale: Scale parameter for a Weibull distribution describing an individuals prophylactic protection over time following treatment\n\nIn the code chunk below, view the parameter sets for DHA-PQP and SP-AQ:\n\n\n# View the parameters for DHA-PQP and SP-AQ:\n\n\n\n\n\n[1]  0.90  0.32  4.30 38.10\n\n\nQuiz\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe shape and scale parameters govern the strength and duration of the prophylactic protection provided by the drug.\n\nLooking at the plot above, answer the following question:\n\n\n[1]  0.90  0.32  4.30 38.10\n\n\nQuiz\n\n\n\n\n\n\n\n\n\n\n\n\nTo simulate the use of a drug in malariasimulation, we load them into the parameters list. This is done using the set_drugs() function. Note that the drug parameters (e.g.¬†AL_params) must be passed to get_drugs() as a list.\n\n\n# Establish a list of malariasimulation parameters:\nparameters &lt;- get_parameters() \n\n# Load the parameters for artemether lumefantrine into the parameters\nparameters &lt;- set_drugs(parameters = parameters, drugs = list(AL_params))\n\n# View the parameters for AL:\nparameters$drug_efficacy\n\n\n\nThe final line of the chunk above shows us how we can view the drug parameters currently loaded the parameters list once they have been appended. When simulating interventions that use antimalarial drugs (e.g.¬†clinical treatment), this can provide a useful check to ensure you have loaded the drug parameters correctly. In the chunk below, view the drug_rel_c parameter:\n\n\n# Establish a list of malariasimulation parameters:\nparameters &lt;- get_parameters() \n\n# Load the parameters for artemether lumefantrine into the parameters list:\nparameters &lt;- set_drugs(parameters = parameters, drugs = list(DHA_PQP_params))\n\n# View the drug_rel_c parameter for DHA-PQP:\n\n\n\n\n\n\nNow that we know how to load antimalarial drug parameters we can specify how they will be administered to the population. In malariasimulation, we parameterise clinical treatment using the set_clinical_treatment() function (run ?set_clinical_treatment() to view the help file for the function). set_clinical_treatment() requires four arguments:\n\nparameters: A list of malariasimulation parameters (with parameters for drug(s) loaded using set_drugs())\ndrug: The indices of the drug which we are parameterising clinical treatment for\ntimesteps: A vector of timesteps on which we want to update clinical treatment coverage\ncoverages: A vector of clinical treatment coverages (proportion of the clinical infections that will be treated in each timestep).\n\nNote that we need to call set_clinical_treatment() for each drug that we are specifying clinical treatment for, and that the timesteps and coverage inputs need to be vectors of equal length, such that each update to the coverage has a corresponding timestep on which the update should take place. The following chunk shows how to set up and run a simulation with clinical treatment:\n\n\n# Establish a list of malariasimulation parameters:\nparameters &lt;- get_parameters(overrides = list(human_population = 1000)) \n\n# Load the parameters for artemether lumefantrine into the parameters\nparameters &lt;- set_drugs(parameters = parameters, drugs = list(AL_params))\n\n# Specify a clinical treatment regime for artemether lumefantrine:\nparameters &lt;- set_clinical_treatment(parameters = parameters, drug = 1, timesteps = c(0, (1 * 365) + 1), coverages = c(0, 0.6))\n\n# Tune the parameter set to an initial EIR:\nparameters &lt;- set_equilibrium(parameters = parameters, init_EIR = 8)\n\n# Run the simulation:\nclinical_treatment_simulation &lt;- run_simulation(timesteps = 3 * 365, parameters = parameters)\n\n# Plot the prevalence through time:\nclinical_treatment_simulation |&gt;\n  ggplot(aes(x = timestep, y = n_detect_730_3650/n_730_3650)) +\n  geom_line(colour = \"deepskyblue2\", linewidth = 1.2) +\n  theme_bw() +\n  labs(x = \"Time (days)\", y = \"Prevalence (2-10)\")+\n  scale_y_continuous(limits = c(0, 1), expand = c(0, 0)) +\n  scale_x_continuous(expand = c(0, 0)) +\n  geom_vline(xintercept = (1 * 365) + 1, linetype = \"dashed\")\n\n\n\n\n\nQuiz\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAwesome, that‚Äôs all of the basics for running malariasimulation simulations with clinical treatment. For the final exercise, I want you to run two simulations to look at the effect of clinical treatment on malaria transmission dynamics.\nThe first simulation is a baseline scenario with the following criteria:\n\nhuman_population size of 10000\nEquilibrate the parameters to an initial EIR of 8 (refer the ‚Äúintroduction‚Äù tutorial if you need to!)\nRun the simulation for 5 years\n\nThe second simulation will use what we‚Äôve learnt to simulate clinical treatment with the following criteria:\n\nSet the human_population parameter to 10000\nLoad the parameters for dihydroartemisinin piperaquine (DHA-PQP)\nInitiate clinical treatment with a coverage of 0.4 at the end of year 1\nIncrease the coverage to 0.8 at the end of the third year\nEquilibrate the simulations with an initial EIR of 8\nRun the simulation for 5 years\n\nPlot the PfPR2-10 for each simulation and compare the outputs!"
  },
  {
    "objectID": "inst/tutorials/treatment/treatment.html#loading-antimalarial-drug-parameters",
    "href": "inst/tutorials/treatment/treatment.html#loading-antimalarial-drug-parameters",
    "title": "Treatment",
    "section": "",
    "text": "As we saw earlier, the first step when using malariasimulation is to load a set of parameters using get_parameters():\n\n\n# Establish a list of malariasimulation parameters:\nparameters &lt;- get_parameters(overrides = list(human_population = 1000))\n\n\n\nThe second step is to load the parameters for the drug(s) we want to simulate into our list of parameters. The malariasimulation package has in-built parameter sets for 3 drugs:\n\nArtemether lumefantrine (AL_params)\nDihydroartemisinin piperaquine (DHA_PQP_params)\nSulfadoxine pyrimethamine (SP_AQ_params)\n\nWe can view these parameter sets by simply calling them. Here are the parameters for artemether lumefantrine:\n\n\n# View the artemether lumefantrine (AL) parameter set:\nAL_params\n\n\n\nThe parameters in these sets are:\n\ndrug_efficacy: probability that treatment with the drug successfully clears the infection\ndrug_rel_c: The onward infectiousness of a treated individual to a mosquito relative to an untreated individual\ndrug_prophylaxis_shape: Shape parameter for a Weibull distribution describing an individuals prophylactic protection over time following treatment\ndrug_prophylaxis_scale: Scale parameter for a Weibull distribution describing an individuals prophylactic protection over time following treatment\n\nIn the code chunk below, view the parameter sets for DHA-PQP and SP-AQ:\n\n\n# View the parameters for DHA-PQP and SP-AQ:\n\n\n\n\n\n[1]  0.90  0.32  4.30 38.10\n\n\nQuiz\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe shape and scale parameters govern the strength and duration of the prophylactic protection provided by the drug.\n\nLooking at the plot above, answer the following question:\n\n\n[1]  0.90  0.32  4.30 38.10\n\n\nQuiz\n\n\n\n\n\n\n\n\n\n\n\n\nTo simulate the use of a drug in malariasimulation, we load them into the parameters list. This is done using the set_drugs() function. Note that the drug parameters (e.g.¬†AL_params) must be passed to get_drugs() as a list.\n\n\n# Establish a list of malariasimulation parameters:\nparameters &lt;- get_parameters() \n\n# Load the parameters for artemether lumefantrine into the parameters\nparameters &lt;- set_drugs(parameters = parameters, drugs = list(AL_params))\n\n# View the parameters for AL:\nparameters$drug_efficacy\n\n\n\nThe final line of the chunk above shows us how we can view the drug parameters currently loaded the parameters list once they have been appended. When simulating interventions that use antimalarial drugs (e.g.¬†clinical treatment), this can provide a useful check to ensure you have loaded the drug parameters correctly. In the chunk below, view the drug_rel_c parameter:\n\n\n# Establish a list of malariasimulation parameters:\nparameters &lt;- get_parameters() \n\n# Load the parameters for artemether lumefantrine into the parameters list:\nparameters &lt;- set_drugs(parameters = parameters, drugs = list(DHA_PQP_params))\n\n# View the drug_rel_c parameter for DHA-PQP:"
  },
  {
    "objectID": "inst/tutorials/treatment/treatment.html#setting-clinical-treatment",
    "href": "inst/tutorials/treatment/treatment.html#setting-clinical-treatment",
    "title": "Treatment",
    "section": "",
    "text": "Now that we know how to load antimalarial drug parameters we can specify how they will be administered to the population. In malariasimulation, we parameterise clinical treatment using the set_clinical_treatment() function (run ?set_clinical_treatment() to view the help file for the function). set_clinical_treatment() requires four arguments:\n\nparameters: A list of malariasimulation parameters (with parameters for drug(s) loaded using set_drugs())\ndrug: The indices of the drug which we are parameterising clinical treatment for\ntimesteps: A vector of timesteps on which we want to update clinical treatment coverage\ncoverages: A vector of clinical treatment coverages (proportion of the clinical infections that will be treated in each timestep).\n\nNote that we need to call set_clinical_treatment() for each drug that we are specifying clinical treatment for, and that the timesteps and coverage inputs need to be vectors of equal length, such that each update to the coverage has a corresponding timestep on which the update should take place. The following chunk shows how to set up and run a simulation with clinical treatment:\n\n\n# Establish a list of malariasimulation parameters:\nparameters &lt;- get_parameters(overrides = list(human_population = 1000)) \n\n# Load the parameters for artemether lumefantrine into the parameters\nparameters &lt;- set_drugs(parameters = parameters, drugs = list(AL_params))\n\n# Specify a clinical treatment regime for artemether lumefantrine:\nparameters &lt;- set_clinical_treatment(parameters = parameters, drug = 1, timesteps = c(0, (1 * 365) + 1), coverages = c(0, 0.6))\n\n# Tune the parameter set to an initial EIR:\nparameters &lt;- set_equilibrium(parameters = parameters, init_EIR = 8)\n\n# Run the simulation:\nclinical_treatment_simulation &lt;- run_simulation(timesteps = 3 * 365, parameters = parameters)\n\n# Plot the prevalence through time:\nclinical_treatment_simulation |&gt;\n  ggplot(aes(x = timestep, y = n_detect_730_3650/n_730_3650)) +\n  geom_line(colour = \"deepskyblue2\", linewidth = 1.2) +\n  theme_bw() +\n  labs(x = \"Time (days)\", y = \"Prevalence (2-10)\")+\n  scale_y_continuous(limits = c(0, 1), expand = c(0, 0)) +\n  scale_x_continuous(expand = c(0, 0)) +\n  geom_vline(xintercept = (1 * 365) + 1, linetype = \"dashed\")\n\n\n\n\n\nQuiz"
  },
  {
    "objectID": "inst/tutorials/treatment/treatment.html#putting-it-all-together",
    "href": "inst/tutorials/treatment/treatment.html#putting-it-all-together",
    "title": "Treatment",
    "section": "",
    "text": "Awesome, that‚Äôs all of the basics for running malariasimulation simulations with clinical treatment. For the final exercise, I want you to run two simulations to look at the effect of clinical treatment on malaria transmission dynamics.\nThe first simulation is a baseline scenario with the following criteria:\n\nhuman_population size of 10000\nEquilibrate the parameters to an initial EIR of 8 (refer the ‚Äúintroduction‚Äù tutorial if you need to!)\nRun the simulation for 5 years\n\nThe second simulation will use what we‚Äôve learnt to simulate clinical treatment with the following criteria:\n\nSet the human_population parameter to 10000\nLoad the parameters for dihydroartemisinin piperaquine (DHA-PQP)\nInitiate clinical treatment with a coverage of 0.4 at the end of year 1\nIncrease the coverage to 0.8 at the end of the third year\nEquilibrate the simulations with an initial EIR of 8\nRun the simulation for 5 years\n\nPlot the PfPR2-10 for each simulation and compare the outputs!"
  },
  {
    "objectID": "materials.html",
    "href": "materials.html",
    "title": "üìù Workshop materials üìù",
    "section": "",
    "text": "Introduction\n\n\n\n\nWorkshop practicals are included as part of the üì¶ [malsimtutorial]. They can be accessed using the run_tutorial() function.\n\nmalsimtutorial::run_tutorial(\"Introduction\")\nmalsimtutorial::run_tutorial(\"treatment\")\nmalsimtutorial::run_tutorial(\"bednets\")\nmalsimtutorial::run_tutorial(\"vaccines\")"
  },
  {
    "objectID": "materials.html#presentations-associated-with-this-workshop",
    "href": "materials.html#presentations-associated-with-this-workshop",
    "title": "üìù Workshop materials üìù",
    "section": "",
    "text": "Introduction"
  },
  {
    "objectID": "materials.html#practicals-associated-with-this-workshop",
    "href": "materials.html#practicals-associated-with-this-workshop",
    "title": "üìù Workshop materials üìù",
    "section": "",
    "text": "Workshop practicals are included as part of the üì¶ [malsimtutorial]. They can be accessed using the run_tutorial() function.\n\nmalsimtutorial::run_tutorial(\"Introduction\")\nmalsimtutorial::run_tutorial(\"treatment\")\nmalsimtutorial::run_tutorial(\"bednets\")\nmalsimtutorial::run_tutorial(\"vaccines\")"
  }
]